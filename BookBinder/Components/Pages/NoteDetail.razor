@page "/note-detail/{SetHashCode:int}"
@using BookBinder.Components.Dialogs
@using BookBinder.Models
@using BookBinder.Services
@using BookBinder.Utils

@inject StateContainer _stateContainer;
@inject IDialogService DialogService
@inject INoteService _noteService;

<style>
    .my-sticky-menu {
        position: -webkit-sticky; 
        position: sticky;
        z-index: 2000;
        top: 64px;
    }
</style>

@if (BookNote != null)
{
    <MudText Typo="Typo.subtitle1" hidden="@(BookNote.NoteSections.Count > 0 ? true : false)"><b>Yoo crete that first section bruda by clicking that "+"  icon</b></MudText>

    <MudDynamicTabs @bind-ActivePanelIndex="@UserIndex"
                    AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                    MinimumTabWidth="20px" Elevation="4" Position="Position.Start"
                    AlwaysShowScrollButtons="BookNote.NoteSections.Count > 0 ? true : false"
                    PrevIcon="@Icons.Material.Filled.Circle" NextIcon="@Icons.Material.Outlined.Circle"
                    HideSlider Rounded ApplyEffectsToContainer>
        @foreach (var tab in BookNote.NoteSections)
        {
            <MudTabPanel ID="@tab.Id" Text="@tab.Title">
                <MudContainer Fixed="true" Class="pa-0" >

                    <MudText Typo="Typo.h3"><b>@tab.Title</b></MudText>


                    <MudFab Class="my-sticky-menu pa-3 mr-2 align-self-end" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddNewSection(tab)" />

                    <MudStack>
                        @foreach (var element in tab.Elements)
                        {
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudTextField Text="@element.Name" TextChanged="(value) => { element.Name = value; UpdateNoteSection(); }" T="string" AutoGrow Immediate />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Text="@element.Description" TextChanged="(value) => { element.Description = value; UpdateNoteSection(); }" T="string" AutoGrow Immediate />
                                </MudItem>
                            </MudGrid>
                            <MudDivider />
                        }
                    </MudStack>
                </MudContainer>

            </MudTabPanel>
        }
    </MudDynamicTabs>
}
else
{
    <p>Loading...</p>
}


@code {

    public int UserIndex;

    public async Task AddTab(Guid id)
    {
        var sectionTitle = await OpenDialog();
        BookNote.NoteSections.Add(new NoteSection() { Id = Guid.NewGuid(), Title = sectionTitle, Elements = new List<NoteSectionElement>() });
        _noteService.UpdateNote(BookNote);
        UserIndex = BookNote.NoteSections.Count - 1; // Automatically switch to the new tab.
        StateHasChanged();
    }

    public void RemoveTab(Guid id)
    {
        var tabView = BookNote.NoteSections.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            BookNote.NoteSections.Remove(tabView);
            _noteService.UpdateNote(BookNote);
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);


    [Parameter] public int SetHashCode { get; set; }
    BookNote BookNote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Getting hashCode " + SetHashCode);

        var data = (BookNote)_stateContainer.ObjectTunnel[SetHashCode];

        Console.WriteLine("object is " + data.Title);
        BookNote = data;
    }

    private async Task<string> OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = false };
        var result = await this.DialogService.Show<NoteSectionDialog>(string.Empty, new DialogParameters(), options).Result;
        return result.Data as string;
    }

    private async Task AddNewSection(NoteSection noteSection)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = false };
        var result = await this.DialogService.Show<NoteElementDialog>(string.Empty, new DialogParameters(), options).Result;
        var elementFromDialog = result.Data as NoteSectionElement;
        if(elementFromDialog != null)
        {
            noteSection.Elements.Add(elementFromDialog);
            _noteService.UpdateNote(BookNote);
        }
    }

    private void UpdateNoteSection()
    {
        _noteService.UpdateNote(BookNote);
    }
}
