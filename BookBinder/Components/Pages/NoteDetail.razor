@page "/note-detail/{SetHashCode:int}"
@using BookBinder.Components.Dialogs
@using BookBinder.Models
@using BookBinder.Services
@using BookBinder.Services.Files
@using BookBinder.Utils

@inject StateContainer _stateContainer;
@inject IDialogService DialogService
@inject INoteService _noteService;
@inject IJSRuntime JsRuntime
@inject ITextFileExport _textFileExport;

<style>
    .my-sticky-menu {
        position: -webkit-sticky; 
        position: sticky;
        z-index: 2000;
        top: 64px;
        background-color: transparent;
    }

    .tab-panel-width {
        width: 150px;
        word-wrap: break-word;
        word-break: break-word;
    }
</style>

@if (BookNote != null)
{
    <MudText Typo="Typo.subtitle1" hidden="@(BookNote.NoteSections.Count > 0 ? true : false)"><b>Yoo crete that first section bruda by clicking that "+"  icon</b></MudText>

    <MudDynamicTabs  @bind-ActivePanelIndex="@UserIndex"
                    AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                    MinimumTabWidth="20px"  Elevation="4" Position="Position.Start"
                    AlwaysShowScrollButtons="BookNote.NoteSections.Count > 0 ? true : false"
                    PrevIcon="@Icons.Material.Filled.Circle" NextIcon="@Icons.Material.Outlined.Circle"
                    HideSlider="true" Rounded ApplyEffectsToContainer>
        @foreach (var tab in BookNote.NoteSections)
        {
            <MudTabPanel ID="@tab.Id" Text="@tab.Title" Class="tab-panel-width">
                <MudContainer Fixed="true" Class="pa-0" >


                    <MudTextField ShrinkLabel="true" Label="Title" Text="@tab.Title" TextChanged="(value) => { tab.Title = value; UpdateNote(); }" T="string" Clearable="true" Immediate />

                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField ShrinkLabel="true" Label="Filter Title" T="string" AutoGrow Immediate @bind-Value="@FilterText" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField ShrinkLabel="true" Label="Filter Description" T="string" AutoGrow Immediate @bind-Value="@FilterDescription" />
                        </MudItem>
                    </MudGrid>

                    <MudPaper Class="d-flex justify-space-between flex-grow-1 gap-4 my-sticky-menu mt-1" Elevation="0">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddNewSection(tab)" />
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.FileOpen" OnClick="() => ExportNote()" />
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.FormatLineSpacing" OnClick="() => OnButtonClick()" />
                    </MudPaper>
                    
                
                    <MudStack>
                        @foreach (var item in tab.Elements.Where(item =>
                                   string.IsNullOrEmpty(FilterText) || item.Name.Contains(FilterText, StringComparison.OrdinalIgnoreCase)
                                   && (string.IsNullOrEmpty(FilterDescription) || item.Description.Contains(FilterDescription, StringComparison.OrdinalIgnoreCase))))
                        {
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudTextField Text="@item.Name" TextChanged="(value) => { item.Name = value; UpdateNote(); }" T="string" AutoGrow Immediate />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Text="@item.Description" TextChanged="(value) => { item.Description = value; UpdateNote(); }" T="string" AutoGrow Immediate />
                                </MudItem>
                            </MudGrid>
                            <MudDivider />
                        }
                    </MudStack>
                </MudContainer>

            </MudTabPanel>
        }
    </MudDynamicTabs>
}
else
{
    <p>Loading...</p>
}

<script>
    function OnScrollEvent() {
        var scrollHeight = document.documentElement.scrollHeight;
        var scrollTop = document.documentElement.scrollTop;
        var clientHeight = document.documentElement.clientHeight;
        var scrollMiddle = scrollTop + clientHeight / 2;

        if (scrollMiddle > scrollHeight / 2) {
            // User has scrolled past the middle of the page, scroll to top
            //document.documentElement.scrollTop = 0;
            window.scrollTo({ left: 0, top: 0, behavior: "smooth" });
        } 
        else 
        {
            // User has not scrolled past the middle of the page, scroll to bottom
            //document.documentElement.scrollTop = scrollHeight;
            window.scrollTo({ left: 0, top: document.body.scrollHeight, behavior: "smooth" });
        }
    }
</script>


@code {
    public string FilterText { get; set; }
    public string FilterDescription { get; set; }

    private async void OnButtonClick()
    {
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    public int UserIndex;

    public async Task AddTab(Guid id)
    {
        var sectionTitle = await OpenDialog();
        BookNote.NoteSections.Add(new NoteSection() { Id = Guid.NewGuid(), Title = sectionTitle, Elements = new List<NoteSectionElement>() });
        _noteService.UpdateNote(BookNote);
        UserIndex = BookNote.NoteSections.Count - 1; // Automatically switch to the new tab.
        StateHasChanged();
    }

    public void RemoveTab(Guid id)
    {
        var tabView = BookNote.NoteSections.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            BookNote.NoteSections.Remove(tabView);
            _noteService.UpdateNote(BookNote);
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);


    [Parameter] public int SetHashCode { get; set; }
    BookNote BookNote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Getting hashCode " + SetHashCode);

        var data = (BookNote)_stateContainer.ObjectTunnel[SetHashCode];

        Console.WriteLine("object is " + data.Title);
        BookNote = data;
    }

    private async Task<string> OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = false };
        var result = await this.DialogService.Show<NoteSectionDialog>(string.Empty, new DialogParameters(), options).Result;
        return result.Data as string;
    }

    private async Task AddNewSection(NoteSection noteSection)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = false };
        var result = await this.DialogService.Show<NoteElementDialog>(string.Empty, new DialogParameters(), options).Result;
        var elementFromDialog = result.Data as NoteSectionElement;
        if(elementFromDialog != null)
        {
            noteSection.Elements.Add(elementFromDialog);
            _noteService.UpdateNote(BookNote);
        }
    }

    private async Task UpdateNote()
    {
        await Task.Run(() => _noteService.UpdateNote(BookNote));
    }

    private async Task ExportNote()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = false };
        var result = await this.DialogService.Show<ExportImportDialog>(string.Empty, new DialogParameters(), options).Result;

        var exportToApp = result.Data as bool?;
        if (exportToApp.HasValue)
        {
            await _textFileExport.FileExport(BookNote, exportToApp.Value);
        }
    } 
}
