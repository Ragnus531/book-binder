@page "/note-detail/{SetHashCode:int}"
@using BookBinder.Components.Dialogs
@using BookBinder.Models
@using BookBinder.Services
@using BookBinder.Utils
@using Microsoft.AspNetCore.Components.QuickGrid
@using QuickGrid = Microsoft.AspNetCore.Components.QuickGrid;

@inject StateContainer _stateContainer;
@inject IDialogService DialogService
@inject INoteService _noteService;

<style>
    .my-sticky-menu {
        position: -webkit-sticky; 
        position: sticky;
        z-index: 2000;
        top: 64px;
    }
</style>

@if (BookNote != null)
{
    <MudText Typo="Typo.h3" hidden="@(BookNote.NoteSections.Count > 0 ? true : false)"><b>Yoo crete that first section bruda by clicking that "+"  icon</b></MudText>

    <MudDynamicTabs @bind-ActivePanelIndex="@UserIndex"
                    AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                    MinimumTabWidth="20px" Elevation="4" Position="Position.Start"
                    AlwaysShowScrollButtons="BookNote.NoteSections.Count > 0 ? true : false"
                    PrevIcon="@Icons.Material.Filled.Circle" NextIcon="@Icons.Material.Outlined.Circle"
                    HideSlider Rounded ApplyEffectsToContainer>
        @foreach (var tab in BookNote.NoteSections)
        {
            <MudTabPanel ID="@tab.Id" Text="@tab.Title">
                <MudContainer Fixed="true" Class="pa-0">

                    <MudText Typo="Typo.h3"><b>@tab.Title</b></MudText>

                    <MudFab Class="my-sticky-menu pa-3" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />

                    <MudStack>
                        @foreach (var person in employees)
                        {
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudTextField T="string" Label="Name" Variant="Variant.Text" Text="@person.Position" AutoGrow />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField T="string" Label="Description" Variant="Variant.Text" Text="@person.Name" AutoGrow />
                                </MudItem>
                            </MudGrid>
                            <MudDivider />
                        }
                    </MudStack>
                </MudContainer>

            </MudTabPanel>
        }
    </MudDynamicTabs>
}
else
{
    <p>Loading...</p>
}


@code {
    public record Employee(string Name, string Position, int YearsEmployed, int Salary, int Rating);
    public IEnumerable<Employee> employees;
    record Person(int PersonId, string Name, DateOnly BirthDate);
    IQueryable<Person> people = new[]
       {
        new Person(10895, "orem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    }.AsQueryable();

    public string TextValue { get; set; }


    public int UserIndex;

    public async Task AddTab(Guid id)
    {
        var sectionTitle = await OpenDialog();
        BookNote.NoteSections.Add(new NoteSection() { Id = Guid.NewGuid(), Title = sectionTitle, Elements = new List<NoteSectionElement>() });
        _noteService.UpdateNote(BookNote);
        UserIndex = BookNote.NoteSections.Count - 1; // Automatically switch to the new tab.
        StateHasChanged();
    }

    public void RemoveTab(Guid id)
    {
        var tabView = BookNote.NoteSections.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            BookNote.NoteSections.Remove(tabView);
            _noteService.UpdateNote(BookNote);
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);


    [Parameter] public int SetHashCode { get; set; }
    BookNote BookNote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Getting hashCode " + SetHashCode);

        var data = (BookNote)_stateContainer.ObjectTunnel[SetHashCode];

        Console.WriteLine("object is " + data.Title);
        BookNote = data;
        employees = new List<Employee>
        {
            new Employee("orem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s", "CPA", 23, 87_000, 4),
            new Employee("Alicia", "Product Manager", 11, 143_000, 5),
            new Employee("Ira", "Developer", 4, 92_000, 3),
            new Employee("John", "IT Director", 17, 229_000, 4),
        };
    }

    private async Task<string> OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = false };
        var result = await this.DialogService.Show<NoteSectionDialog>(string.Empty, new DialogParameters(), options).Result;
        return result.Data as string;

        //DialogService.Show<NoteSectionDialog>("Simple Dialog", options);
    }
}
