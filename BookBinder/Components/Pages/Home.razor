@page "/"
@using BlazorComponentBus
@using BookBinder.Contracts.BookNoteComponents
@using BookBinder.Models
@using BookBinder.Services
@using BookBinder.UI
@using BookBinder.Utils

@inject INoteService _noteService;
@inject NavigationManager _navigationManager;
@inject StateContainer _stateContainer;
@inject AppState _appState;
@inject BlazorComponentBus.ComponentBus _bus

<MudButton Variant="Variant.Filled">Default</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary">Primary</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary">Secondary</MudButton>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (_bookNotes == null)
{
    <p>Loading...</p>
}
else
{
    <MudPaper Width="100%">
         <MudNavMenu>>
            @foreach (var bookNote in _bookNotes)
            {
                @* <MudNavLink Href="@($"note-detail/{bookNote.Id}")">@bookNote.Title</MudNavLink> *@
                <MudListItem Text="@bookNote.Title" @onclick="() => GoToNoteDetail(bookNote)" />
            }
        </MudNavMenu>
    </MudPaper>
}


@code{
    private List<BookNote> _bookNotes = new List<BookNote>();

    protected override void OnInitialized()
    {
        _appState.SetTitle("Notes");


        var listFromDb = _noteService.GetNotes().OrderBy(a => a.Title).ToList();
        _bookNotes = listFromDb ?? new List<BookNote>();
        _bus.Subscribe<BookNoteAddedEvent>(BookNoteAddedHandler);
    }

    void GoToNoteDetail(BookNote bookNote){
        var hashCode = bookNote.GetHashCode();
        _stateContainer.ObjectTunnel.Add(hashCode, bookNote);
        _navigationManager.NavigateTo($"/note-detail/{hashCode}");
    }

    private void BookNoteAddedHandler(MessageArgs args)
    {
        var message = args.GetMessage<BookNoteAddedEvent>();

        if(message.BookNote != null)
        {
            AddElementInSortedOrder(message.BookNote);
            InvokeAsync(() => StateHasChanged());
        }
    }



    private void AddElementInSortedOrder(BookNote element)
    {
        //local comparer
        var comparer = Comparer<BookNote>.Create((x, y) => string.Compare(x.Title, y.Title, StringComparison.OrdinalIgnoreCase));
        int index = _bookNotes.BinarySearch(element, comparer);
        if (index < 0)
        {
            index = ~index; // bitwise complement of the index
        }


        _bookNotes.Insert(index, element);
    }
}