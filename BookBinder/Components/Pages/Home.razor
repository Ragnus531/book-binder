@page "/"
@using BlazorComponentBus
@using BookBinder.Contracts.BookNoteComponents
@using BookBinder.Models
@using BookBinder.Services
@using BookBinder.UI
@using BookBinder.Utils

@inject INoteService _noteService;
@inject NavigationManager _navigationManager;
@inject StateContainer _stateContainer;
@inject AppState _appState;
@inject BlazorComponentBus.ComponentBus _bus;
@inject IDialogService _dialogService;

<style>
    .clickable-stack {
        background-color: #e0f7fa; /* Light cyan background to indicate clickability */
        border: 2px solid #26c6da; /* Cyan border */
        border-radius: 8px; /* Rounded corners */
        margin-bottom: 10px; /* Spacing between elements */
    }

    .clickable-stack-no-border {
        background-color: #e0f7fa; /* Light cyan background to indicate clickability */
    }

    .clickable-stack .mud-icon-button {
        align-self: center;
    }
</style>

@if (_bookNotes == null)
{
    <p>Loading...</p>
}
else
{
    <MudStack Class="mt-2">
        @foreach (var bookNote in _bookNotes)
        {
            <MudStack Row="true" Class="mud-elevation-4 py-2 rounded clickable-stack mud-theme-primary-darken" @onclick="() => GoToNoteDetail(bookNote)">
                <MudText Align="Align.Center" Class="px-2" Typo="Typo.h6">@bookNote.Title</MudText>
                <MudPaper Class="d-flex flex-row-reverse flex-grow-1 gap-4 mr-2 clickable-stack-no-border mud-theme-primary-darken" Elevation="0">
                    <MudFab Size="Size.Small" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit"  />
                    <MudFab Size="Size.Small" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.DeleteForever" @onclick="() => DeleteBookNote(bookNote)" />
                </MudPaper>
            </MudStack>
        }
    </MudStack>
}


@code{
    private List<BookNote> _bookNotes = new List<BookNote>();

    protected override void OnInitialized()
    {
        _appState.SetTitle("Notes");


        var listFromDb = _noteService.GetNotes().OrderBy(a => a.Title).ToList();
        _bookNotes = listFromDb ?? new List<BookNote>();
        _bus.Subscribe<BookNoteAddedEvent>(BookNoteAddedHandler);
    }

    private async Task DeleteBookNote(BookNote bookNote)
    {
        bool? result = await _dialogService.ShowMessageBox(
           $"Delete {bookNote.Title}?",
           "Deleting can not be undone!",
           yesText: "Delete!", cancelText: "Cancel");

        if(result != null && result.Value)
        {
            _noteService.DeleteNote(bookNote);
            _bookNotes.Remove(bookNote);
            StateHasChanged();
        }
    }

    private void GoToNoteDetail(BookNote bookNote){
        var hashCode = bookNote.GetHashCode();
        _stateContainer.ObjectTunnel.Add(hashCode, bookNote);
        _navigationManager.NavigateTo($"/note-detail/{hashCode}");
    }

    private void BookNoteAddedHandler(MessageArgs args)
    {
        var message = args.GetMessage<BookNoteAddedEvent>();

        if(message.BookNote != null)
        {
            AddElementInSortedOrder(message.BookNote);
            InvokeAsync(() => StateHasChanged());
        }
    }



    private void AddElementInSortedOrder(BookNote element)
    {
        //local comparer
        var comparer = Comparer<BookNote>.Create((x, y) => string.Compare(x.Title, y.Title, StringComparison.OrdinalIgnoreCase));
        int index = _bookNotes.BinarySearch(element, comparer);
        if (index < 0)
        {
            index = ~index; // bitwise complement of the index
        }


        _bookNotes.Insert(index, element);
    }
}